{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","player","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","onClick","value","Board","i","_this","this","winLine","key","squares","includes","row","c","push","renderSquare","class-name","React","Component","Game","_this2","Object","C_Users_PC_Documents_Development_react_demo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","C_Users_PC_Documents_Development_react_demo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_PC_Documents_Development_react_demo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","stepNumber","isAscending","xIsNext","slice","length","calculateWinner","winner","setState","concat","lastMoved","lastPlayer","step","status","_this3","current","winMeta","moveHistory","map","move","curPlayer","col","Math","floor","desc","jumpTo","reverse","isDraw","class","href","handleClick","line","handleSortToggle","resetGame","lines","_lines$i","C_Users_PC_Documents_Development_react_demo_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3fd134c.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square(props) {\n  const className =\n    \"square\" +\n    (props.highlight ? \" highlight\" : \"\") +\n    (\" player-\" + props.player);\n  return (\n    <button className={className} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const winLine = this.props.winLine;\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        highlight={winLine && winLine.includes(i)}\n        player={this.props.squares[i]}\n      />\n    );\n  }\n\n  render() {\n    const gridSize = 3;\n    let squares = [];\n\n    for (let i = 0; i < gridSize; i++) {\n      let row = [];\n\n      for (let c = 0; c < gridSize; c++) {\n        row.push(this.renderSquare(i * gridSize + c));\n      }\n      squares.push(\n        <div key={i} class-name=\"board-row\">\n          {row}\n        </div>\n      );\n    }\n\n    return <div>{squares}</div>;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      isAscending: true,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          lastMoved: i,\n          lastPlayer: this.state.xIsNext ? \"X\" : \"O\"\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  handleSortToggle() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  resetGame() {\n    this.setState({\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      isAscending: true,\n      xIsNext: false\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n\n    const winMeta = calculateWinner(current.squares);\n    const winner = winMeta.winner;\n\n    const stepNumber = this.state.stepNumber;\n    const isAscending = this.state.isAscending;\n\n    let moveHistory = history.map((step, move) => {\n      const lastMoved = step.lastMoved;\n      const curPlayer = step.lastPlayer;\n      const col = 1 + (lastMoved % 3);\n      const row = 1 + Math.floor(lastMoved / 3);\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n\n      if (move === 0) {\n        return (\n          <tr>\n            <td>{move}</td>\n            <td>-</td>\n            <td>-</td>\n            <td>-</td>\n            <td key={move}>\n              <button\n                className=\"btn btn-primary btn-sm\"\n                onClick={() => this.jumpTo(move)}\n              >\n                {desc}\n              </button>\n            </td>\n          </tr>\n        );\n      } else {\n        return (\n          <tr className={move === stepNumber ? \"move-list-item-selected\" : \"\"}>\n            <td>{move}</td>\n            <td>Player {curPlayer}</td>\n            <td>{row}</td>\n            <td>{col}</td>\n            <td key={move}>\n              <button\n                className=\"btn btn-primary btn-sm\"\n                onClick={() => this.jumpTo(move)}\n              >\n                {desc}\n              </button>\n            </td>\n          </tr>\n        );\n      }\n    });\n\n    if (!isAscending) {\n      moveHistory.reverse();\n    }\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      if (winMeta.isDraw) {\n        status = \"Draw\";\n      } else {\n        status = \"Next Player: \" + (this.state.xIsNext ? \"x\" : \"o\");\n      }\n    }\n\n    return (\n      <div className=\"game\">\n        <div class=\"container\">\n          <div class=\"row\">\n            <div class=\"col-lg-12 text-center\">\n              <h1 class=\"mt-5\">Tic Tac Toe</h1>\n              <p class=\"lead\">\n                A <i>toeriffic</i> spin on the <a href=\"https://reactjs.org/tutorial/tutorial.html\">Intro to React</a> tutorial.\n              </p>\n\n              <div class=\"row\">\n                <div className=\"game-board\">\n                  <div class=\"status\">{status}</div>\n                  <Board\n                    squares={current.squares}\n                    onClick={i => this.handleClick(i)}\n                    winLine={winMeta.line}\n                  />\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <div className=\"game-info\">\n                  <div class=\"move-history\">\n                    <h4>\n                      Move History&nbsp;\n                      <button\n                        className=\"btn btn-secondary btn-sm\"\n                        onClick={() => this.handleSortToggle()}\n                      >\n                        {isAscending ? \"descending\" : \"ascending\"}\n                      </button>\n                    </h4>\n                    <table class=\"moveHistory\">\n                      <tr>\n                        <th>Move</th>\n                        <th>Player</th>\n                        <th>Row</th>\n                        <th>Col</th>\n                        <th>Jump</th>\n                      </tr>\n                      {moveHistory}\n                    </table>\n                    <br />\n\n                    <button\n                        className=\"btn btn-danger btn\"\n                        onClick={() => this.resetGame()}\n                      >\n                        Reset Game\n                      </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// helper functions\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: lines[i]\n      };\n    }\n  }\n\n  let isDraw = true;\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      isDraw = false;\n      break;\n    }\n  }\n\n  return {\n    winner: null,\n    line: null,\n    isDraw: isDraw\n  };\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}